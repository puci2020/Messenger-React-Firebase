{"version":3,"sources":["Theme/GlobalStyles.js","Theme/Theme.js","Theme/Layout.js","Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","colors","primary","secondary","white","gray","font","size","xs","s","m","l","Layout","children","MessageWrapper","styled","div","Message","forwardRef","ref","name","text","isUser","className","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Wrapper","Header","FormWrapper","MessegesWrapper","App","useState","input","setInput","user","setUser","messages","setMessages","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","message","data","prompt","FormControl","Input","placeholder","type","value","onChange","event","target","IconButton","disabled","variant","color","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","style","width","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f0a552fa.chunk.js","sourcesContent":["import {createGlobalStyle} from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    overflow-x: hidden;\r\n\r\n  }  \r\n  html, body{\r\n  font-size: 10px;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  //font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n  //  monospace;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","export const theme = {\r\n    colors: {\r\n        primary: '#0084FF',\r\n        secondary: '#3E4042',\r\n        white: '#E4E6EB',\r\n        gray: '#8a8d91'\r\n    },\r\n    font: {\r\n        size:{\r\n            xs: '1rem',\r\n            s: '1.2rem',\r\n            m: '1.4rem',\r\n            l: '1.5rem'\r\n        }\r\n    }\r\n};\r\n","import React from 'react';\nimport GlobalStyle from './GlobalStyles'\nimport {ThemeProvider} from 'styled-components'\nimport {theme} from \"./Theme\";\n\nconst Layout = ({children}) => {\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyle/>\n            {children}\n        </ThemeProvider>\n    );\n};\n\nexport default Layout;\n","import React, {forwardRef} from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst MessageWrapper = styled.div`\r\n  font-size: ${({theme}) => theme.font.size.l};\r\n  width: 100%;\r\n  overflow-y: hidden;\r\n  \r\n  .message__box{\r\n      margin: 0 10px 10px 10px;\r\n      padding: 10px;\r\n      width: fit-content;\r\n      height: fit-content;\r\n      max-width: 90%;\r\n      border: 1px solid lightgrey;\r\n      border-radius: 20px;\r\n      box-shadow: 0 .1em .5em lightgrey ;\r\n      background-color: ${({theme}) => theme.colors.secondary};\r\n      color: ${({theme}) => theme.colors.white};\r\n   }\r\n  & .message__text{ \r\n    background-color: ${({theme}) => theme.colors.primary};\r\n    color: white;\r\n    float: right;\r\n    text-align: right;\r\n  }\r\n  \r\n  .message__span{\r\n  padding: 0 25px;\r\n  width: 100%;\r\n  font-size: ${({theme}) => theme.font.size.s};\r\n  color: ${({theme}) => theme.colors.gray};\r\n  }\r\n  & .message__user{\r\n  display: none;\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst Message = forwardRef(({name, text}, ref) => {\r\n\r\n    const isUser = name === text.name;\r\n\r\n    return (\r\n\r\n        <MessageWrapper ref={ref}>\r\n            <div className={isUser ? 'message__user' : 'message__span'}>{text.name}</div>\r\n            <div className={isUser ? 'message__box message__text' : 'message__box'}>\r\n\r\n                {text.text}\r\n            </div>\r\n        </MessageWrapper>\r\n\r\n    );\r\n});\r\n\r\nexport default Message;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = firebase.initializeApp({\r\n    apiKey: \"AIzaSyDqauWWUw9VsCDHl-ooOgx9iTkm7UtxdAM\",\r\n    authDomain: \"messenger-8c286.firebaseapp.com\",\r\n    databaseURL: \"https://messenger-8c286.firebaseio.com\",\r\n    projectId: \"messenger-8c286\",\r\n    storageBucket: \"messenger-8c286.appspot.com\",\r\n    messagingSenderId: \"395732823006\",\r\n    appId: \"1:395732823006:web:3c831ba9a546c768ec4b4f\",\r\n    measurementId: \"G-J9HWRZ3SWN\"\r\n});\r\n\r\nconst db = firebaseConfig.firestore();\r\n\r\nexport default db;\r\n","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components'\nimport Layout from \"./Theme/Layout\";\nimport {Input, FormControl} from '@material-ui/core'\nimport SendIcon from '@material-ui/icons/Send';\nimport {IconButton} from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport db from './firebase'\nimport firebase from \"firebase\";\nimport FlipMove from 'react-flip-move'\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 100vw;\n  height: auto;\n  min-height: 100vh;\n  margin: auto;\n  \n \n`;\n\nconst Header = styled.div`\n  position: relative;\n  width: 100%;\n  height: 150px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  background-color: white;\n h1, h2{\n  text-align: center;\n  margin-bottom: 20px;\n  overflow: hidden;\n  padding: 15px;\n  }\n`;\n\nconst FormWrapper = styled.div`\n  width: 100%;\n  height: 100px;\n  position: fixed;\n  background-color: white;\n  bottom: 0;\n  //top:100px;\n display: flex;\n align-items: center;\n justify-content: center;\n z-index: 1;\n \n .form{\n width: 500px;\npadding: 20px;\ndisplay: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: center;\n\n }\n \n .form__input{\n flex: 1;\n }\n \n .form__button{\n flex:0;\n }\n \n`;\n\nconst MessegesWrapper = styled.div`\nwidth: 500px;\nmax-width: 100vw;\nheight: auto;\nmargin: auto;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nflex-direction: column;\nposition:relative;\n`;\n\n\nfunction App() {\n    const [input, setInput] = useState('');\n    const [user, setUser] = useState('');\n    const [messages, setMessages] = useState([]);\n    // console.log(messages);\n\n    useEffect(() => {\n        db.collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n            setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n        })\n    }, []);\n\n    useEffect(() => {\n        setUser(prompt(\"Please enter your name\"));\n\n    }, [])\n    const sendMessage = (event) => {\n        event.preventDefault();\n\n        db.collection('messages').add({\n            text: input,\n            name: user,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        });\n\n        setInput('');\n    };\n\n    return (\n        <Layout>\n            <Wrapper>\n                <Header>;\n\n                    <h1>Messenger create by React and Firebase</h1>\n                    <h2>Welcome {user}</h2>\n                </Header>\n                <FormWrapper>\n                    <FormControl className=\"form\">\n                        <Input className=\"form__input\" placeholder=\"Enter a message\" type='text' value={input} onChange={event => setInput(event.target.value)}/>\n\n                        <IconButton className=\"form_button\" disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\"\n                                    onClick={sendMessage}>\n<SendIcon/>\n                        </IconButton>\n                    </FormControl>\n                </FormWrapper>\n\n                <MessegesWrapper>\n                    <FlipMove style={{width: '100%'}}>\n                        {messages.map(({id, message}) => (\n                            <Message key={id} name={user} text={message}/>\n                        ))}\n                    </FlipMove>\n                </MessegesWrapper>\n\n\n            </Wrapper>\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}